<?php
/*
 *  Project : my.ri.net.ua
 *  File    : functions.php
 *  Path    : billing/libs/functions.php
 *  Author  : Ariv <ariv@meta.ua> | https://github.com/arivm7
 *  Org     : RI-Network, Kiev, UK
 *  Created : 20 Sep 2025 10:53:30
 *  License : GPL v3
 *
 *  Copyright (C) 2025 Ariv <ariv@meta.ua> | https://github.com/arivm7 | RI-Network, Kiev, UK
 */


use app\models\AbonModel;
use app\models\UserModel;
use billing\core\base\Lang;
use config\tables\Firm;
use config\tables\PA;
use config\Icons;
use config\tables\Perm;
use config\SessionFields;
use config\Sym;
use config\tables\User;
use config\tables\Abon;
use config\tables\AbonRest;
use billing\core\App;

require_once DIR_LIBS . '/compare_functions.php';
require_once DIR_LIBS . '/billing_functions.php';


/**
 * –ê–¥—Ä–µ—Å —ç—Ç–æ–≥–æ —Ö–æ—Å—Ç–∞
 */
define('URL_DOMAIN', $_SERVER['HTTP_HOST']);
define('URL_HOST', "https://".$_SERVER['HTTP_HOST']."");



/**
 * –ê–¥—Ä–µ—Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏/–≤—ã—Ö–æ–¥–∞
 * echo "<META HTTP-EQUIV=\"REFRESH\" CONTENT=\"0;URL=". $_SERVER['REQUEST_SCHEME']."://".$_SERVER['SERVER_NAME'].":".$_SERVER['SERVER_PORT']."".$path."\">";
 */
define('URL_REDIRECT', URL_HOST . "/");



$I_COLOR_STEP = 1;
$COLOR1_VALUE = COLOR1_VALUE;
$COLOR2_VALUE = COLOR2_VALUE;
$COLOR3_VALUE = COLOR3_VALUE;
$COLOR4_VALUE = COLOR4_VALUE;
$COLOR5_VALUE = COLOR5_VALUE;
$COLOR6_VALUE = COLOR6_VALUE;



const TABLE_ATTRIBUTES = "class='table table-striped table-hover table-bordered'";



// —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
// üûÄ‚è¥‚óÄ‚óÅ‚óÇ‚óÉ‚óÑ
define('CH_TRIANGLE_LEFT',     "üûÄ");
define('CH_TRIANGLE_RIGT',     "üûÇ");
// üûÇü¢í‚ä≥‚èµ‚ñ∂‚ñ∑‚ñ∏‚ñπ‚ñ∫‚ßê‚Æû‚Æû
define('CH_TRIANGLE',          "‚ñ∫");
// ‚ñº‚ñ≤‚ñæ‚ñ¥
define('CH_TRIANGLE_UP',       "‚ñ≤");
define('CH_TRIANGLE_DOWN',     "‚ñº");



/**
 * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–π—Å–æ–≤—ã—Ö –¥–Ω–µ–π,
 * –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö —Å–Ω—è—Ç–∏–µ —Å –ø–∞—É–∑—ã –∑–∞–ø—Ä–µ—â–µ–Ω–æ.
 * –ú–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–∞–π—Å–æ–≤—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
define("UNPAUSED_DAYS_ENABLE", 2);




const ACCURACY     = 10000; // —Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏—è float –∑–Ω–∞—á–µ–Ω–∏–π
const LEN_DOG_NUM_MIN =  3; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –≤ –Ω–æ–º–µ—Ä–µ –¥–æ–≥–æ–≤–æ—Ä–∞
const LEN_DOG_NUM_MAX = 12; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –≤ –Ω–æ–º–µ—Ä–µ –¥–æ–≥–æ–≤–æ—Ä–∞



define('CHECK0', "<font size=-1 face=monospace color=gray>[&nbsp;]</font>");
define('CHECK1', "<font size=-1 face=monospace color=gray>[<font color=green>x</font>]</font>");

function get_html_CHECK(bool $has_check, string $title="", string $title_on="", string $title_off="", $check0 = CHECK0, $check1 = CHECK1): string {
    if (strlen($title_on) > 0)  { $c1 = "<font title='".$title_on."'>".$check1."</font>"; }  else { $c1 = $check1; }
    if (strlen($title_off) > 0) { $c0 = "<font title='".$title_off."'>".$check0."</font>"; } else { $c0 = $check0; }
    if ($has_check)             { $c  = $c1; }                                              else { $c  = $c0; }
    if (strlen($title) > 0)     { $s  = "<font title='".$title."'>{$c}</font>"; }           else { $s  = "{$c}"; }
    //$s = ((strlen($title) > 0) ? "<font title='".$title."'>" : "").($has_check?CHECK1:CHECK0).((strlen($title) > 0) ? "</font>" : "");
    return $s;
}



/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å –ø–æ–ª—è–º–∏, –æ–∑–Ω–∞—á–∞—é—â–∏–º–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
 * @param int $permission
 * @return array
 */
function get_permission_rec(int $permission): array {
    $rec = array(
        Perm::NONE_TITLE => ($permission  == Perm::NONE_VALUE) ? 1 : 0,
        Perm::VIEW_TITLE => ($permission  &  Perm::VIEW_VALUE) ? 1 : 0,
        Perm::EDIT_TITLE => ($permission  &  Perm::EDIT_VALUE) ? 1 : 0,
        Perm::ADD_TITLE  => ($permission  &  Perm::ADD_VALUE)  ? 1 : 0,
        Perm::DEL_TITLE  => ($permission  &  Perm::DEL_VALUE)  ? 1 : 0,
    );
    return $rec;
}



/**
 * –°–æ–±–∏—Ä–∞–µ—Ç —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ –æ–¥–Ω–æ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
 * @param bool $view
 * @param bool $edit
 * @param bool $add
 * @param bool $del
 * @return int
 */
function get_permission_value(bool $view = false, bool $edit = false, bool $add = false, bool $del = false): int {
    return (int)((bool)$view * Perm::VIEW_VALUE) | (int)((bool)$edit * Perm::EDIT_VALUE) | (int)((bool)$add * Perm::ADD_VALUE) | (int)((bool)$del * Perm::DEL_VALUE);
}



function debug(mixed $value, string $comment = '', DebugView $debug_view = DebugView::PRINTR, int $die = 0): void
{
    echo "<b>$comment:</b>";
    echo "<pre>";
    if (is_null($value)) {
        echo "NULL";
    } else {
        switch ($debug_view) {
            case DebugView::ECHO:
                echo "$value";
                break;
            case DebugView::DUMP:
                var_dump($value);
                break;
            case DebugView::PRINTR:
            default:
                echo print_r($value, true);
                break;
        }
    }
    echo "</pre>";
    echo "<hr>";
    if ($die) die();
}



function debug_msg(string $text, string|null $color = null): void
{
    echo (is_null($color) ? "" : "<font color=$color>") . str_replace("\n", "<br>", $text) . (is_null($color) ? "<br>" : "</font>");
}



/**
 * –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π.
 * –î–µ–ª–∞–µ—Ç –∏–∑ —Ä–∞–∑–Ω–æ–º–µ—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—É—é –º–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏
 * @param array $table
 * @return array
 */
function get_aligned_table(array|null $table): array|null {
    if (is_null($table) || count($table) <= 1) {
        return $table;
    }

    /*
     * –§–æ—Ä–º–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä —Å –∫–ª—é—á–∞–º–∏
     */
    $keys = array();
    foreach ($table as $row_key => $row) {
        $key_index = 0;
        foreach ($row as $col_key => $col) {
            if (!in_array($col_key, $keys)) {
                $keys = array_merge(array_slice($keys, 0, $key_index), array($col_key), array_slice($keys, $key_index));
            }
            $key_index++;
        }
    }

    /*
     * –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –∏ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á—É ,—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ —Å —Ç–∞–∫–∏–º –∫–ª—é—á–æ–º
     */
    $aligned = array();
    foreach ($table as $row_key => $row) {
        $full_row = array();
        foreach ($keys as $col_key) {
            $full_row[$col_key] = (array_key_exists($col_key, $row) ? $row[$col_key] : null );
        }
        $aligned[$row_key] = $full_row;
    }
    return $aligned;
}



/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é html-–∫–æ–¥ —Ç–∞–±–ª–∏—Ü—ã,
 * –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏—Å–Ω–¥–µ–∫—Å–Ω—ã–π –º–∞—Å—Å–∏–≤, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∞—Å—Å–æ—Ü–∏—Ç–∞—Ç–∏–≤–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤
 * @param array   $t                    -- –¢–∞–±–ª–∏—Ü–∞ –≤ –≤–∏–¥–µ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
 * @param string  $table_attributes     -- html-—Ç—ç–≥–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∞–º–æ–π —Ç–∞–±–ª–∏—Ü—ã
 * @param string  $caption              -- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã, —Ç—ç–≥ <caption>–ó–∞–≥–æ–ª–æ–≤–æ–∫</caption>
 *                                         (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –≤–∏–¥–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å–≤–µ–¥—ë–Ω–Ω–æ–π –≤ –æ–¥–Ω—É —à–∏—Ä–æ–∫—É—é —è—á–µ–π–∫—É)
 * @param array   $col_titles           -- –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
 * @param array   $cell_attributes      -- html-—Ç—ç–≥–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —è—á–µ–µ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–º —Å—Ç–æ–ª—é—Ü–µ
 * @param array   $cell_format_valuues  -- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–π–∫–∏
 * @param bool    $show_header          -- –ï—Å–ª–∏ falce, —Ç–æ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –∫–æ–ª–æ–Ω–∫–∏ ‚Ññ–ø–ø –∏ ID –Ω–µ –≤—ã–≤–æ–¥—è—Ç—Å—è, —Ç.–µ. –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã
 * @param bool    $show_key             -- –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É –∫–ª—é—á–µ–π —Å—Ç—Ä–æ–∫ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–æ–º–µ—Ä–∞)
 * @param bool    $show_No = true       -- –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å-–ª–∏ –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
 * @param string  $obj_id               -- ID-–∏–º—è –æ–±—ä–µ–∫—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã, –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ —Å–∫—Ä–∏–ø—Ç–æ–≤
 * @param bool    $hidden               -- –ø–∞—Ä–∞–º–µ—Ç—Ä hidden, —Ç.–µ. —Ç–∞–±–ª–∏—Ü–∞ –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç–∞
 * @param bool    $bk_fill = true       -- –ó–∞–ª–∏–≤–∞—Ç—å –ª–∏ —Ü–≤–µ—Ç–æ–º —Ñ–æ–Ω —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
 * @param string  $bk_color_title       -- —Ü–≤–µ—Ç –∑–∞–ª–∏–≤–∫–∏ —Å—Ç—Ä–æ–∫–∏ $caption –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
 * @param string  $bk_color1            -- –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—ã–π —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
 * @param string  $bk_color2            -- –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—ã–π —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
 * @return string                       -- —Å—Ç—Ä–æ–∫–∞ html-–∫–æ–¥–∞
 * @throws Exception
 */
function get_html_table(
        array|null  $t,
        bool        $pre_align = false,      // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ —à–∏—Ä–∏–Ω–µ
        string      $table_attributes = TABLE_ATTRIBUTES,
        string|null $caption = null,
        array|null  $col_titles = null,
        bool        $child_col_titles = false,
        array|null  $cell_attributes = null,
        bool        $child_cell_attributes = false,
        array|null  $cell_format_valuues = null,
        bool        $show_header = true,
        bool        $show_key = false,
        bool        $show_No = false,
        string|null $obj_id = null,
        bool        $hidden = false,
        bool        $bk_fill = false,
        string|null $bk_color_title = null,
        string      $bk_color1 = COLOR1_VALUE,
        string      $bk_color2 = COLOR2_VALUE,
        string|null $anchor = null           // —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∫–æ—Ä—è –¥–ª—è #anchor (<a name={$anchor}></a>)
        ): string {
    global $I_COLOR_STEP;
    if (is_null($t)) { $t = []; }
    if (!is_array($t)) { throw new Exception("get_html_table(array...); –ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤"); }
    if (count($t) == 0) {
        /**
         * –ú–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π
         */
        $t = [(!is_null($caption)?"<nobr>{$caption}</nobr>":""), "–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞"];
        return get_html_table($t, show_header: 0, obj_id: $obj_id, hidden: $hidden);
    }
    if ($pre_align) { $t = get_aligned_table($t); }
    $table = "";
    $table .= "<table".($hidden?" hidden":"").(!is_null($obj_id)?" id=".$obj_id:"").(!is_null($table_attributes)?" ".$table_attributes:"").">";
    $table .= (!is_null($anchor)?"<a name={$anchor}></a>":"");
    $table .= (!is_null($caption)?"<tr ".($bk_fill ? " style='background-color:".(is_null($bk_color_title) ? (is_odd($I_COLOR_STEP++) ? $bk_color1 : $bk_color2) : $bk_color_title).";'" : "")." ><th colspan=".(count($t[array_key_first($t)])+1).">{$caption}</th></tr>" : "");

    /**
     * HEADER
     */
    if ($show_header) {
        $table .= "<thead>";
        $table .= "<tr".($bk_fill ? " bgcolor='".(is_null($bk_color_title) ? (is_odd($I_COLOR_STEP++) ? $bk_color1 : $bk_color2) : $bk_color_title)."'" : "").">";
        $table .= ($show_No  ?"<th><font color=gray>‚Ññ<br>–ø–ø</font></th>" : "");
        $table .= ($show_key ?"<th>key</th>" : "");
        $col_index = 0;
        if (is_array($t[array_key_first($t)])) {
            foreach ($t[array_key_first($t)] as $cell_key => $cell_value) {
                if (is_null($cell_attributes) || !str_contains($cell_attributes[$col_index], "hidden")) {
                    $table .= "<th>";
                    $table .= (!is_null($col_titles)?(is_empty($col_titles[$col_index])?$cell_key:$col_titles[$col_index]):$cell_key);
                    $table .= "</th>";
                }
                $col_index++;
            }
        } else {
            //debug("(2)T: ", $t, "<hr>");
            $cell_key = array_key_first($t);
            if (is_null($cell_attributes) || !str_contains($cell_attributes[$col_index], "hidden")) {
                $table .= "<th>";
                $table .= (!is_null($col_titles)?(is_empty($col_titles[$col_index])?$cell_key:$col_titles[$col_index]):$cell_key);
                $table .= "</th>";
            }
            $col_index++;
        }
        $table .= "</tr>";
        $table .= "</thead>";
    }

    /**
     * BODY
     */
    $row_index = 0;
    foreach ($t as $row_key => $row_vector) {
        $row_index++;
        $table .= "<tbody>";
        $table .= "<tr".($bk_fill ? " bgcolor='".(is_odd($I_COLOR_STEP++) ? $bk_color1 : $bk_color2)."'" : "").">";
        if ($show_header) {
            $table .= ($show_No  ? "<th align=right><font color=gray>&nbsp;".($row_index).".</font></th>" : "");
            $table .= ($show_key ? "<th>".$row_key."</th>" : "");
        }
        $col_index = 0;
        if (is_array($row_vector)) {
            foreach ($row_vector as $cell_key => $cell_value) {
                $table .= "<td".($cell_attributes ? " {$cell_attributes[$col_index]}" : "").">";
                if (is_null($cell_attributes) || !str_contains($cell_attributes[$col_index], "hidden")) {
                    if (is_array($cell_value)) {
                        if (count($cell_value) > 0) {
                            $table .= get_html_table(
                                        t: $cell_value,
                                        pre_align: $pre_align,
                                        table_attributes: $table_attributes,
                                        col_titles: ($child_col_titles ?  $col_titles : null),
                                        child_col_titles: $child_col_titles,
                                        cell_attributes: ($child_cell_attributes ? $cell_attributes : null),
                                        child_cell_attributes: $child_cell_attributes,
                                        show_header: $show_header,
                                        show_key: $show_key,
                                        show_No: $show_No,
                                        bk_fill: $bk_fill,
                                        bk_color_title: $bk_color_title,
                                        bk_color1: $bk_color1,
                                        bk_color2: $bk_color2);
                        } else {
                            $table .= "–ú–∞—Å—Å–∏–≤ –ø—É—Å—Ç";
                        }

                    } else {
                        $table .= ($cell_format_valuues ? sprintf($cell_format_valuues[$col_index], $cell_value) : $cell_value);
                    }
                    //echo "<pre><b>$i: </b>"; var_dump($t[$i]); echo "</pre>";
                }
                $table .= "</td>";
                $col_index++;
            }
        } else {
            $value = $row_vector;
            $table .= "<td".($cell_attributes ? " {$cell_attributes[$col_index]}" : "").">";
            if (is_null($cell_attributes) || !str_contains($cell_attributes[$col_index], "hidden")) {
                $table .= (is_null($cell_format_valuues) ? $value : sprintf($cell_format_valuues[$col_index], $value));
            }
            $table .= "</td>";
            $col_index++;

        }
        $table .= "</tr>";
    }
    $table .= "</tbody>";
    $table .= "</table>";
    return $table;
}



function is_odd($i) {
	return !((round($i/2, 0, PHP_ROUND_HALF_DOWN)*2) == $i);
}



function isAuth() {
//     /** @var \billing\core\base\Auth $AUTH */
    global $AUTH;
    return $AUTH->user_id != $AUTH::NO_AUTH;
}




/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—É—Å—Ç–∞—è –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
 * @param mixed $var
 * @return true/false
 *
 *  empty
 *  (PHP 4, PHP 5, PHP 7)
 *  empty ‚Äî –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—É—Å—Ç–∞ –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
 *  –û–ø–∏—Å–∞–Ω–∏–µ ¬∂
 *  empty ( mixed $var ) : bool
 *
 *  –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—á–∏—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø—É—Å—Ç–æ–π. –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ FALSE. empty() –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
 *  –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ¬∂
 *
 *  var
 *      –ü—Ä–æ–≤–µ—Ä—è–µ–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
 *           –ó–∞–º–µ—á–∞–Ω–∏–µ:
 *           –î–æ PHP 5.5 empty() –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∏ –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞. –î—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å: empty(trim($name)). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ trim($name) == false.
 *      –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ empty() —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —è–≤–ª—è–µ—Ç—Å—è —Ç–æ—á–Ω—ã–º —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–æ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ !isset($var) || $var == false
 *   –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ¬∂
 *   –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç FALSE, –µ—Å–ª–∏ var —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø—É—Å—Ç–æ–µ –Ω–µ–Ω—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç TRUE.
 *   –°–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∫–∞–∫ –ø—É—Å—Ç—ã–µ:
 *       "" (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
 *      0 (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)
 *      0.0 (—á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π)
 *      "0" (—Å—Ç—Ä–æ–∫–∞)
 *      NULL
 *      FALSE
 *      array() (–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤)
 *
 */
function is_empty_(mixed $var) {
    //echo "is_empty(): "; var_dump($var); echo "<br>";
    //echo "[".$var."]:".(!isset($var)?1:0)."|".(($var == false)?1:0)."|".(is_null($var)?1:0)."|".(($var == "")?1:0)."|".((strlen($var) === 0)?1:0)."|".(($var == 0)?1:0)."<br>";
    if(is_array($var)) {
        return !(count($var) > 0);
    } else {
        return ((is_null($var) || strlen($var) === 0) || ($var == "") || (!isset($var)) || ($var == false) || ($var === 0));
    }
    //return empty($var);
    //return !isset($var) || $var == false;
}



/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ "–ø—É—Å—Ç–æ—Ç—ã" –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.
 *
 * @param mixed $var            –ü—Ä–æ–≤–µ—Ä—è–µ–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
 * @param bool $checkArray      –°—á–∏—Ç–∞—Ç—å –ø—É—Å—Ç—ã–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ []
 * @param bool $checkStr        –°—á–∏—Ç–∞—Ç—å –ø—É—Å—Ç–æ–π –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É ""
 * @param bool $checkZero       –°—á–∏—Ç–∞—Ç—å –ø—É—Å—Ç—ã–º —á–∏—Å–ª–æ 0 –∏ 0.0
 * @param bool $checkZeroStr    –°—á–∏—Ç–∞—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫—É "0" (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é -- –Ω–µ—Ç)
 * @param bool $checkNull       –°—á–∏—Ç–∞—Ç—å –ø—É—Å—Ç—ã–º NULL
 * @param bool $checkFalse      –°—á–∏—Ç–∞—Ç—å –ø—É—Å—Ç—ã–º —Å—Ç—Ä–æ–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ false
 *
 * @return bool true, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é "–ø—É—Å—Ç–æ—Ç—ã"
 */
function is_empty(
    mixed $var,
    bool $checkArray    = true,  // []
    bool $checkStr      = true,  // ""
    bool $checkZero     = true,  // 0 | 0.0
    bool $checkZeroStr  = false, // "0"
    bool $checkNull     = true,  // NULL
    bool $checkFalse    = true   // FALSE
): bool {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    if ($checkArray && is_array($var) && count($var) === 0) {
        return true;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    if ($checkStr && is_string($var) && $var === '') {
        return true;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ 0
    if ($checkZero && is_int($var) && $var === 0) {
        return true;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ 0,0
    if ($checkZero && is_float($var) && $var === 0.0) {
        return true;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É "0"
    if ($checkZeroStr && is_string($var) && $var === "0") {
        return true;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NULL
    if ($checkNull && is_null($var)) {
        return true;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–≥–æ–µ false
    if ($checkFalse && $var === false) {
        return true;
    }

    // –ù–∏—á–µ–≥–æ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
    return false;

}




function a(
        string|null $href = null,
        string|null $attributes = null,
        string|null $target = "_self",
        string|null $alt = null,
        string|null $text = null,
        string|null $title = null,
        string|null $src = null,
        int|string|null $width = Icons::ICON_WIDTH_DEF,
        int|string|null $height = Icons::ICON_HEIGHT_DEF,
        string|null $color = null,
        string|null $style = null,
        string|null $id = null
        ): string {

    if (is_null($text) && is_null($src)) {
        throw new \Exception('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã text==null –∏ src==null. –ö—Ç–æ-—Ç–æ –∏–∑ –Ω–∏—Ö –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω —è–≤–Ω–æ.');
    }
    return
            (is_null($href)
                ? ""
                : "<a href='{$href}'"
                  . ($attributes ? " {$attributes} " : "")
                  . (is_null($target) ? "" : " target='{$target}' ")
                  . ">"
            )
          . (is_null($color)
                ? ""
                : "<font color={$color}>"
            )
          . (is_null($src)
                ? ""
                : "<img src='{$src}' "
                    . (is_null($alt)     ? "" : "alt=\"{$alt}\"")." "
                    . (is_null($title)   ? "" : "title=\"{$title}\"") . " "
                    . (is_empty($width)  ? "" : "width={$width}") . " "
                    . (is_empty($height) ? "" : "height={$height}") . " "
                    . (is_empty($style)  ? "" : "style=\"{$style}\"") . " "
                    . (is_empty($id)     ? "" : "id=\"{$id}\"") . " "
                    . ">"
            )
          . (is_null($text)
                ? ""
                : "<span "
                    . (is_null($title)   ? "" : "title=\"{$title}\"") . " "
                    . (is_empty($style)  ? "" : "style=\"{$style}\"") . " "
                    . (is_empty($id)     ? "" : "id=\"{$id}\"") . " "
                    . ">"
                    . $text
                    . "</span>"
            )
          . (is_null($color)
                ? ""
                : "</font>"
            )
          . (is_null($href)
                ? ""
                : "</a>"
            );
}



/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç html-—Å—Ç—Ä–æ–∫—É —Å —Ç—ç–≥–æ–º "<font face=$face color=$color title=$title size=$size>—Ç–µ–∫—Å—Ç</font>" –æ–∫—Ä–∞—à–∏–≤–∞—é—â–∏–º —Å—Ç—Ä–æ–∫—É —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º
 * @param string $s -- —Ç–µ–∫—Å—Ç
 * @param string $color -- —Ü–≤–µ—Ç
 * @param string $title -- —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–≥–∞ title, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
 * @param bool $b -- –∂–∏—Ä–Ω–æ–µ –Ω–∞—á–µ—Ä—Ç–∞–Ω–∏–µ <b>—Ç–µ–∫—Å—Ç</b>
 * @param bool $u -- –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç–æ–µ –Ω–∞—á–µ—Ä—Ç–∞–Ω–∏–µ <u>—Ç–µ–∫—Å—Ç</u>
 * @param string $face -- –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –≥–∞—Ä–Ω–∏—Ç—É—Ä—ã —à—Ä–∏—Ñ—Ç–æ–≤. serif ‚Äî —à—Ä–∏—Ñ—Ç—ã —Å –∑–∞—Å–µ—á–∫–∞–º–∏ (–∞–Ω—Ç–∏–∫–≤–µ–Ω–Ω—ã–µ), —Ç–∏–ø–∞ Times; sans-serif ‚Äî —Ä—É–±–ª–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã (—à—Ä–∏—Ñ—Ç—ã –±–µ–∑ –∑–∞—Å–µ—á–µ–∫ –∏–ª–∏ –≥—Ä–æ—Ç–µ—Å–∫–∏), —Ç–∏–ø–∏—á–Ω—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å ‚Äî Arial; cursive ‚Äî –∫—É—Ä—Å–∏–≤–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã; fantasy ‚Äî –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã; monospace ‚Äî –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã, —à–∏—Ä–∏–Ω–∞ –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Ç–∞–∫–æ–º —Å–µ–º–µ–π—Å—Ç–≤–µ –æ–¥–∏–Ω–∞–∫–æ–≤–∞.
 * @return string
 */
function paint(
        string|null $s,
        string|null $color=null,
        string      $title="",
        string|null $size=null,
        bool        $b=false,
        bool        $u=false,
        string|null $face=null,
        bool        $span=false
        ): string {
    if (is_null($s)) { return ""; }
    return  ($span ? "<span>" : "")
            . "<font ".(is_null($face) ? "" : "face='{$face}'")." ".(!is_null($size) ? "size={$size}" : "")." ".(is_null($color) ? "" : "color='{$color}'")." ".(is_empty($title) ? "" : " title=\"".$title."\" ").">"
            . ($u ? "<u>" : "")
            . ($b ? "<b>" : "")
            . $s
            . ($b ? "</b>" : "")
            . ($u ? "</u>" : "")
            . "</font>"
            . ($span ? "</span>" : "");
}



/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞:
 * –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã –º–∞—Å—Å–∏–≤–∞ —Ä–∞–≤–Ω—ã –∑–∞–ø–∏—Å–∏ ID —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
 * @param array $arr
 * @return array
 */
function indexing_arr(array $arr): array {
    $indexed = array();
    foreach ($arr as $row) {
        $indexed[$row['id']] = $row;
    }
    return $indexed;
}



/**
 * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –º–∞—Å—Å–∏–≤–∞
 * (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ get_tps_by_uid() )
 * –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å get_tps_by_uid, —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä–∫—É –∑–∞–ø—Ä–æ—Å–æ–º
 * @param $a
 * @param $b
 * @return int
 */
function compare_title($a, $b) {
    if ($a['title'] == $b['title']) {
        return 0;
    }
    return ($a['title'] < $b['title']) ? -1 : 1;
}



/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç html-—Å—Ç—Ä–æ–∫—É —Å –∫–æ–¥–æ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
 * @param string $phone_number
 * @return string
 */
function url_tel(string $phone_number): string {
    return "<a href='tel:$phone_number' rel=nofollow title='–ü–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É $phone_number' target=_blank><img src=". Icons::SRC_ICON_PHONE." alt=CALL width=16 height=16></a>";
}

/**
 * –ó–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–∞ HTML-—Å—Å—ã–ª–∫–∏ tel:
 *
 * @param string $text –¢–µ–∫—Å—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω—ã
 * @return string –¢–µ–∫—Å—Ç —Å HTML-—Å—Å—ã–ª–∫–∞–º–∏
 */
function url_tel_all(string $text): string {
    // –†–µ–≥–µ–∫—Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +XXXXXXXXXXXX
    $pattern = '/\+\d{12,14}/';

    // –ó–∞–º–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–π –Ω–æ–º–µ—Ä –Ω–∞ —Å—Å—ã–ª–∫—É
    return preg_replace_callback($pattern, function($matches) {
        $number = $matches[0];
        return '<a href="tel:' . h($number) . '">' . h($number) . '</a>';
    }, $text);
}


/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç html-—Å—Ç—Ä–æ–∫—É —Å –∫–æ–¥–æ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É –°–ú–°-–æ—Ç–ø—Ä–∞–≤–∫–∏
 * @param string $phone_numbers
 * @return string
 */
function url_sms(string $phone_numbers): string {
    return "<a href='sms:$phone_numbers' rel=nofollow title='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –°–ú–° –Ω–æ–º–µ—Ä–∞–º, —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤ —Å–ø–∏—Å–∫–µ.' target=_blank><img src=".Icons::SRC_ICON_SMS." alt=SMS width=16 height=16></a>";
}



function url_email(string $email, ?string $text = null, ?string $src = null, ?string $attributes = null): string {
    $subj  = rawurlencode(__('Rilan'));
    $body  = rawurlencode(
                  __('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ')
                . '\n\n\n\n----\n'
                . __('–° —É–≤–∞–∂–µ–Ω–∏–µ–º,')
                . __('Rilan')
             );
    $cc    = '';
    $bcc   = '';
    $title = __('–ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ');
    return "<a href=\"mailto:{$email}?subject={$subj}&body={$body}&cc={$cc}&bcc={$bcc}\" title='{$title}' {$attributes}>"
            . ($src ? get_html_img(src: Icons::SRC_ICON_EMAIL) : "")
            . ($text ? h($text) : "")
            . "</a>";
}



/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL —Ç–µ–∫—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞, –≤–∫–ª—é—á–∞—è –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ –¥–æ–º–µ–Ω.
 * –ï—Å–ª–∏ $full_url == true, —Ç–æ –≤–∏–¥–∞ 'https://my.site.com:443/page.php'
 * –ï—Å–ª–∏ $full_url == false, —Ç–æ –≤–∏–¥–∞ '/page.php'
 * @param bool $full_url
 * @return string
 */
function get_http_script(bool $full_url = true): string {

    return
    ($full_url
        ?   (isset($_SERVER['REQUEST_SCHEME']) ? $_SERVER['REQUEST_SCHEME'] : REQUEST_SCHEME_DEFAULT)
            . "://"
            . (isset($_SERVER['SERVER_NAME']) ? $_SERVER['SERVER_NAME'] : SERVER_NAME_DEFAULT)
            . ":"
            . (isset($_SERVER['SERVER_PORT']) ? $_SERVER['SERVER_PORT'] : SERVER_PORT_DEFAULT)
        :   ""
    )   . $_SERVER['SCRIPT_NAME'];
}





function get_html_img(
        string $src,
        string|null $href=null,
        string|null $alt=null,
        string|null $target="_self",
        string|null $title=null,
        int   |null $width=ICON_WIDTH_DEF,
        int   |null $height=ICON_HEIGHT_DEF,
        string|null $color=null,
        string|null $style=null,
        string|null $id=null
        ) {
    return
            (
                is_null($href)
                    ? ""
                    : "<a href='{$href}'"
                      . (is_null($target) ? "" : " target='{$target}' ")
                      . ">"
            )
          . (is_null($color) ? "":"<font color={$color}>")
          . "<img src='{$src}' "
                . (is_null($alt) ? "" : "alt='{$alt}'")." "
                . (is_null($title) ? "" : "title='{$title}'") . " "
                . (is_empty($width) ? "" : "width={$width}") . " "
                . (is_empty($height) ? "" : "height={$height}") . " "
                . (is_empty($style) ? "" : "style=\"{$style}\"") . " "
                . (is_empty($id) ? "" : "id=\"{$id}\"") . " "
                . ">"
          . (is_null($color) ? "":"</font>")
          . (is_null($href) ? "":"</a>");
}



function get_html_green_red(bool $flag, string $title_on = "ON", string $title_off = "OFF"): string {
    global $SRC_OK, $SRC_RED, $ICON_WIDTH_DEF, $ICON_HEIGHT_DEF;
    $on  = "<img src=$SRC_OK alt=ON width=$ICON_WIDTH_DEF height=$ICON_HEIGHT_DEF title='$title_on'>";
    $off = "<img src=$SRC_RED alt=OFF width=16 height=16 title='$title_off'>";
    return ($flag?$on:$off);
}



function get_html_check_img(
        bool $status,
        string $title       = "",
        string $title_true  = "",
        string $title_false = "",
        string $img_true    = Icons::SRC_OK,
        string $img_false   = Icons::SRC_WARN,
        string $alt         = "",
        string $alt_true    = "[Ok]",
        string $alt_false   = "[WARN]",
        string|null $style  = null,
        int|null $icon_width     = Icons::ICON_WIDTH_DEF,
        int|null $icon_height    = Icons::ICON_HEIGHT_DEF
        ): string {
    if ($title) {
        $title_true  = $title . $title_true;
        $title_false = $title . $title_false;
    }
    if ($alt) {
        $alt_true  = $alt . $alt_true;
        $alt_false = $alt . $alt_false;
    }
    if ($status) {
        return  get_html_img(
                        src:    $img_true,
                        alt:    $alt_true,
                        title:  $title_true,
                        width:  $icon_width, height:  $icon_height,
                        style:  $style,
                        color:  GREEN
                );
    } else {
        return  get_html_img(
                        src:    $img_false,
                        alt:    $alt_false,
                        title:  $title_false,
                        width:  $icon_width, height:  $icon_height,
                        style:  $style,
                        color:  RED
                );
    }
}



function last_octet_str(string $ip): string {
    return  num_len(value: ltrim(string: strrchr(haystack: $ip, needle: "."), characters: "."), length: 3);
}



function num_len($value, $length = 2) {
    $str = "".$value;
    while (strlen($str) < $length) {
        $str = "0".$str;
    }
    return $str;
}



/**
 * –£–¥–∞–ª—è–µ—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —Ü–µ–ª–æ–º—É —á–∏—Å–ª—É
 * @param string $str
 * @return string
 */
function clear_int(string $str): string {
    return preg_replace("/[^\d\-]/", "", $str);
}



/**
 * –£–¥–∞–ª—è–µ—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ float —á–∏—Å–ª—É
 * @param string $str
 * @return string
 */
function clear_float(string $str): string {
    return preg_replace("/[^\d\-\.\,]/", "", $str);
}


function var_dump_ret($mixed = null) {
  ob_start();
  var_dump($mixed);
  $content = ob_get_contents();
  ob_end_clean();
  return $content;
}



function redirect_to(string $host = URL_HOST, string $path = "/") {
//    echo "<META HTTP-EQUIV=\"REFRESH\" CONTENT=\"0;URL=". $_SERVER['REQUEST_SCHEME']."://".$_SERVER['SERVER_NAME'].":".$_SERVER['SERVER_PORT']."".$path."\">";
//    header('Location: ' . self::URL_REDIRECT . ''); //–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∞–π—Ç–∞ }
    $redirect = "<META HTTP-EQUIV=\"REFRESH\" CONTENT=\"0;URL=". $host . $path."\">";
//    echo htmlentities($redirect);
    echo $redirect;
    exit;
}



function redirect_(string | false $url = false) {
    if ($url) {
        $redirect = $url;
    } else {
        $redirect = isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : "/";
    }
    header("Location: {$redirect}");
    exit;
}



function redirect(string | false $url = false) {
    if ($url) {
        $redirect = $url;
    } else {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π URL –∏ —Ä–µ—Ñ–µ—Ä–µ—Ä
        $current_url = $_SERVER['REQUEST_URI'] ?? '/';
        $referer = $_SERVER['HTTP_REFERER'] ?? '/';
        
        // –ï—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º URL –∏–ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç,
        // –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        if (parse_url($referer, PHP_URL_PATH) === parse_url($current_url, PHP_URL_PATH)) {
            $redirect = '/';
        } else {
            $redirect = $referer;
        }
    }
    header("Location: {$redirect}");
    exit;
}



/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML-—Å—É—â–Ω–æ—Å—Ç–∏ (&#10;, &nbsp;, &#x0A; –∏ —Ç.–¥.).
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫.
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, –≤–∫–ª—é—á–∞—è ' –∏ ".
 * @param string|null $str
 * @return string
 */
function h(string|null $str): string {
    // return htmlspecialchars($str ?? '', ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8');

    if ($str === null) {
        return '';
    }

    // –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –≤—Å–µ—Ö HTML-—Å—É—â–Ω–æ—Å—Ç–µ–π
    $entityPattern = '/&(?:[a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);/';

    // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π
    $entities = [];

    // –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ä—ã __ENTITY0__, __ENTITY1__ –∏ —Ç.–¥.
    $str = preg_replace_callback($entityPattern, function($matches) use (&$entities) {
        $key = '__ENTITY' . count($entities) . '__';
        $entities[$key] = $matches[0];
        return $key;
    }, $str);

    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    $str = htmlspecialchars($str, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8');

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞
    $str = strtr($str, $entities);

    return $str;

}



function sort_array_by_field(array &$array, string $field, bool $asc = true): void {
    usort($array, function ($a, $b) use ($field, $asc) {
        return $asc
            ? ($a[$field] <=> $b[$field])
            : ($b[$field] <=> $a[$field]);
    });
}



function sort_objects_by_field(array &$array, string $field, bool $asc = true): void {
    usort($array, function ($a, $b) use ($field, $asc) {
        return $asc
            ? ($a->$field <=> $b->$field)
            : ($b->$field <=> $a->$field);
    });
}



/**
 * –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å —Å–æ—Ö—Ä–∞–Ω–∏–Ω–∏–µ–º –∫–ª—é—á–µ–π
 * @param array $array
 * @param string $field
 * @param bool $asc
 * @return void
 */
function sort_assoc_by_field(array &$array, string $field, bool $asc = true): void {
    uasort($array, function ($a, $b) use ($field, $asc) {
        $valA = $a[$field] ?? null;
        $valB = $b[$field] ?? null;

        return $asc
            ? ($valA <=> $valB)
            : ($valB <=> $valA);
    });
}



/**
 * –§–æ—Ä–º–∏—Ä—É–µ—Ç URL —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ –º–∞—Å—Å–∏–≤–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π,
 * —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫
 * –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (?page=2, ?page=3 –∏ —Ç.–¥.), –Ω–µ –¥—É–±–ª–∏—Ä—É—è –ø–∞—Ä–∞–º–µ—Ç—Ä page.
 * @return string
 */
function get_uri(array $excludes = []): string {
    if (!$excludes) {
        return $_SERVER['REQUEST_URI'];
    }
    /**
     * –î–µ–ª–∏—Ç —Ç–µ–∫—É—â–∏–π URL –ø–æ —Å–∏–º–≤–æ–ª—É "?" :
     * $url[0] ‚Äî –ø—É—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "/admin/users")
     * $url[1] ‚Äî —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "sort=name&page=3")
     */
    $url = explode('?', $_SERVER['REQUEST_URI']);
    /**
     * ‚Äî –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –Ω–æ–≤—ã–π URL —Å —Ç–µ–º –∂–µ –ø—É—Ç—ë–º –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º "?"
     */
    $uri = $url[0] . '?';
    /**
     * –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ä–∞–∑–±–∏–≤–∞–µ–º –∏—Ö –ø–æ "&"
     */
    if (isset($url[1]) && $url[1] != '') {
        $params = explode('&', $url[1]);
        /**
         * –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∏ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä "page",
         * –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ URL, —ç–∫—Ä–∞–Ω–∏—Ä—É—è "&" –∫–∞–∫ "&amp;" (HTML-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ).
         * –í–∞–∂–Ω–æ:
         * &amp; ‚Äî —ç—Ç–æ HTML-—Å—É—â–Ω–æ—Å—Ç—å –¥–ª—è "&". –û–Ω–∞ –Ω—É–∂–Ω–∞, –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ HTML (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ <a href="...">).
         * –ï—Å–ª–∏ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å URL –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –∏–ª–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞—Ö, —Ç–∞–º –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–π "&".
         */
        foreach ($params as $param) {
            foreach ($excludes as $ex) {
                if (!preg_match("#{$ex}=#", $param)) {
                    $uri .= "{$param}&amp;";
                }
            }
        }
    }
    return $uri;
}



/**
 * –û–±–µ—Ä—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —è–∑—ã–∫–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è
 * @param string $key -- –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è
 * @param mixed $param -- –≤—Å—Ç–∞–≤–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç—Ä–æ–∫—É
 * @param string|null $default -- –∑–Ω–∞—á–µ–Ω–∏–µ "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é" –µ—Å–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏
 * @return string
 */
function  __(string $key, $param = null, string|null $default = null): string {
    return \billing\core\base\Lang::get(key: $key, param: $param, default: $default);
}



/**
 * –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
 * @return string
 */
function __L(): string {
    return billing\core\base\Lang::code();
}



/**
 * –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è get_price_apply_age();
 * @param array $pa
 * @return PAStatus
 */
function __pa_age(array $pa): PAStatus {
    return get_price_apply_age(price_apply: $pa);
}



/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–µ $field
 * –ò–∑ —Ç–∞–±–ª–∏—Ü—ã $table,
 * –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å $id_field = $id_value,
 * @param string $table
 * @param string $id_field
 * @param int $id_value
 * @param string $field
 * @return string
 */
function __field(string $table, string $id_field, int $id_value, string $field): string {
    $model = new AbonModel();
    $row = $model->get_row_by_id(table_name: $table, field_id: $id_field, id_value: $id_value);
    return $row[$field];
}



/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –ø–æ–ª–µ. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é -- –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≤–∏–¥–∞—Ö.
 * @param int|null $user_id
 * @param int|null $abon_id
 * @param string $field -- –∏–º—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –ø–æ–ª—è
 * @return string
 */
function __user(?int $user_id = null, ?int $abon_id = null, string $field = User::F_NAME_SHORT): string {
    $model = new AbonModel();
    if ($user_id) {
        return $model->get_user($user_id)[$field];
    }
    if ($abon_id) {
        return $model->get_user_by_abon_id($abon_id)[$field];
    }
    return '';
}



/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –∏–∑ –∑–∞–ø–∏—Å–∏ –∞–±–æ–Ω–µ–Ω—Ç–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é -- –∞–¥—Ä–µ—Å.
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≤–∏–¥–∞—Ö.
 * @param int $abon_id
 * @param string $field
 * @return string
 */
function __abon(int|null $abon_id = null, string $field = Abon::F_ADDRESS): string {
    $model = new AbonModel();
    return $model->get_abon($abon_id)[$field];
}



const MSG_HAS_ERROR   = 1;
const MSG_HAS_SUCCESS = 2;

function msg_to_session(string|array|null $msg = null, int $status = MSG_HAS_ERROR): void {
    if (is_array($msg)) {
        $s  = "<ul>";
        foreach ($msg as $value) {
            $s .= "<li>{$value}</li>";
        }
        $s .= "</ul>";
    } elseif (is_string($msg)) {
        $s = $msg;
    } else {
        $s = "<pre>" . print_r($msg, true) ."</pre>";
    }
    switch ($status) {
        case MSG_HAS_ERROR:
            $_SESSION[SessionFields::ERROR] = $msg;
            break;
        case MSG_HAS_SUCCESS:
            $_SESSION[SessionFields::SUCCESS] = $msg;
            break;
        default:
            throw new Exception(__('–ù–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è') . ': [' . $status . ']');
         // break;
    }

}


// function get_html_pa_status_attr(PAStatus $status): string {

//     // bootstrap 5
//     // "<span class='badge rounded-pill text-bg-primary'>Primary</span>"
//     // "<span class='badge rounded-pill text-bg-secondary'>Secondary</span>"
//     // "<span class='badge rounded-pill text-bg-success'>Success</span>"
//     // "<span class='badge rounded-pill text-bg-danger'>Danger</span>"
//     // "<span class='badge rounded-pill text-bg-warning'>Warning</span>"
//     // "<span class='badge rounded-pill text-bg-info'>Info</span>"
//     // "<span class='badge rounded-pill text-bg-light'>Light</span>"
//     // "<span class='badge rounded-pill text-bg-dark'>Dark</span>"

//     switch ($status) {
//         case \PAStatus::FUTURE:
//             return "class='badge rounded-pill text-bg-secondary'";
//             //break;
//         case \PAStatus::CURRENT:
//             return "class='badge rounded-pill text-bg-success'";
//             //break;
//         case \PAStatus::PAUSE_TODAY:
//             return "class='badge rounded-pill text-bg-warning'";
//             //break;
//         case \PAStatus::PAUSE:
//             return "class='badge rounded-pill text-bg-secondary'";
//             //break;
//         case \PAStatus::CLOSED:
//             return "class='badge rounded-pill text-bg-secondary'";
//             //break;
//         default:
//             return "class='badge rounded-pill text-bg-danger'";
//             //break;
//     }
// }



// function get_html_pa_status_badge(PAStatus $status, ?array $messages = null): string
// {
//     if (!$messages) {
//         $messages = [
//             \PAStatus::FUTURE->name      => __('–ë—É–¥—É—â–∏–π'),
//             \PAStatus::CURRENT->name     => __('–¢–µ–∫—É—â–∏–π'),
//             \PAStatus::PAUSE_TODAY->name => __('–ù–∞ –ø–∞—É–∑–µ —Å–µ–≥–æ–¥–Ω—è'),
//             \PAStatus::PAUSE->name      => __('–ü–∞—É–∑–∞'),
//             \PAStatus::CLOSED->name => __('–ó–∞–∫—Ä—ã—Ç'),
//         ];
//     }
//     switch ($status) {
//         case \PAStatus::FUTURE:
//             return "<span ".get_html_pa_status_attr($status).">{$messages[PAStatus::FUTURE->name]}</span>";
//             //break;
//         case \PAStatus::CURRENT:
//             return "<span ".get_html_pa_status_attr($status).">{$messages[PAStatus::CURRENT->name]}</span>";
//             //break;
//         case \PAStatus::PAUSE_TODAY:
//             return "<span ".get_html_pa_status_attr($status).">{$messages[PAStatus::PAUSE_TODAY->name]}</span>";
//             //break;
//         case \PAStatus::PAUSE:
//             return "<span ".get_html_pa_status_attr($status).">{$messages[PAStatus::PAUSE->name]}</span>";
//             //break;
//         case \PAStatus::CLOSED:
//             return "<span ".get_html_pa_status_attr($status).">{$messages[PAStatus::CLOSED->name]}</span>";
//             //break;
//         default:
//             return "<span ".get_html_pa_status_attr($status).">ERROR</span>";
//             //break;
//     }
// }




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∞–±–æ–Ω–µ–Ω—Ç–∞
 * –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–µ–¥–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π
 * @param array $rest -- –ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å–∏–≤ –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –≥—Ä–∞–Ω–∏—Ü –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∞–±–æ–Ω–µ–Ω—Ç–∞
 * @param array $abon -- –ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å–∏–≤ –∑–∞–ø–∏—Å–∏ –∞–±–æ–Ω–µ–Ω—Ç–∞
 * @return DutyWarn -- —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∞–±–æ–Ω–µ–Ω—Ç–∞
 */
function get_abon_warn_status(array|null $rest, array $abon): DutyWarn {

    if (is_null($rest)) { return DutyWarn::NA; }

    if  (
            !isset($rest[AbonRest::F_PREPAYED]) || !isset($rest[AbonRest::F_SUM_PP30A]) || 
            !isset($rest[AbonRest::F_SUM_PP01A]) || !isset($rest[AbonRest::F_REST])
        ) 
    {
        update_rest_fields($rest);
    }

    switch (true) {
        case (is_null($rest[AbonRest::F_PREPAYED])):
            return DutyWarn::ON_PAUSE;
            // break;
        case ($rest[AbonRest::F_PREPAYED] > $abon[Abon::F_DUTY_MAX_WARN]):
            return DutyWarn::NORMAL;
            // break;
        case (($rest[AbonRest::F_PREPAYED] <= $abon[Abon::F_DUTY_MAX_WARN]) && ($rest[AbonRest::F_PREPAYED] > $abon[Abon::F_DUTY_MAX_OFF])):
            return DutyWarn::WARN;
            // break;
        case ($rest[AbonRest::F_PREPAYED] <= $abon[Abon::F_DUTY_MAX_OFF]):
            return DutyWarn::NEED_OFF;
            // break;
        default:
            return DutyWarn::NA;
            // break;
    }
}



function get_description_by_warn(DutyWarn $status): string {
    switch ($status) {
        case DutyWarn::NA:
            return __("–°—Ç–∞—Ç—É—Å –Ω–µ –ø–æ–Ω—è—Ç–µ–Ω, —ç—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å.");
            // break;
        case DutyWarn::ON_PAUSE:
            return __("–£—Å–ª—É–≥–∞ –Ω–∞ –ø–∞—É–∑–µ.");
            // break;
        case DutyWarn::NORMAL:
            return __("–û–ø–ª–∞—Ç–∞ –µ—Å—Ç—å. –£—Å–ª—É–≥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.");
            // break;
        case DutyWarn::WARN:
            return __("–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞. %s –£—Å–ª—É–≥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞", CR);
            // break;
        case DutyWarn::NEED_OFF:
            return __("–û–ø–ª–∞—Ç—ã –¥–∞–≤–Ω–æ –Ω–µ—Ç, –Ω—É–∂–Ω–æ –æ—Ç–∫–ª—é—á–∞—Ç—å. %s –£—Å–ª—É–≥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞", CR);
            // break;
        case DutyWarn::INFO:
            return __("INFO. %s –£—Å–ª—É–≥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞", CR);
            // break;
        default:
            return "";
            // break;
    }
}



/**
 * –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
 * @param string|null $left
 * @param string|null $right
 * @param string $attributes
 * @return string
 */
function get_html_content_left_right_(string|null $left, string|null $right, string $attributes = ''): string {
    return  "<div ".($attributes ?: "")." style='display: flex; justify-content: space-between; align-items: center;'>"
                . "<div>{$left}</div>"
                . "<div>{$right}</div>"
            . "</div>";
}



/**
 * –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (Bootstrap-–≤–µ—Ä—Å–∏—è)
 * @param string|null $left   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–µ–≤–∞
 * @param string|null $right  –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø—Ä–∞–≤–∞
 * @param string      $add_class  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ CSS-–∫–ª–∞—Å—Å—ã
 * @param string      $attributes  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ HTML-–∞—Ç—Ä–∏–±—É—Ç—ã (id, data-...)
 * @return string
 */
function get_html_content_left_right(
    string|null $left,
    string|null $right,
    string $add_class = '',
    string $attributes = ''
): string {
    $classes = trim("d-flex justify-content-between align-items-center $add_class");
    return  "<div class='$classes' $attributes>"
                . "<div>{$left}</div>"
                . "<div>{$right}</div>"
            . "</div>";
}



function get_firm_status_str(array $firm, ?string $ref = null): string {
    if (!$ref) {
        $ref = isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : "";
    }

    $ret = "<span face=monospace>";
    $ret .= implode('&nbsp;|&nbsp;', get_firm_status($firm, $ref));
    $ret .= "</span>";
    return $ret;
}



function get_firm_status(array $firm, ?string $ref = null): array {

    if (!$ref) {
        $ref = isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : "";
    }

    $statuses = [
        Firm::F_HAS_DELETE => [
            0 => [
                'char'  => Sym::CH_OFF,
                'color' => 'green',
                'title' => "–°–µ–π—á–∞—Å —Å—Ç–∞—Ç—É—Å &laquo;–†–∞–±–æ—Ç–∞–µ—Ç&raquo;\n–ù–∞–∂–∞—Ç—å –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è.",
            ],
            1 => [
                'char'  => Sym::CH_OFF,
                'color' => 'gray',
                'title' => '–°–µ–π—á–∞—Å —Å—Ç–∞—Ç—É—Å &laquo;–£–¥–∞–ª–µ–Ω–æ&raquo;. &#10–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, &#10–∫—Ä–æ–º–µ —Ä–∞–Ω–µ–µ –≤—ã–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤&#10–ù–∞–∂–∞—Ç—å –¥–ª—è &laquo;–í–∫–ª—é—á–µ–Ω–∏—è&raquo;.',
            ],
        ],

        Firm::F_HAS_ACTIVE => [
            0 => [
                'char'  => Sym::CH_PAUSE,
                'color' => 'orange',
                'title' => "–°–µ–π—á–∞—Å —Å—Ç–∞—Ç—É—Å &laquo;–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ&raquo;. &#10–í –Ω–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. &#10–ù–∞–∂–∞—Ç—å –¥–ª—è &laquo;–ê–∫—Ç–∏–≤–∞—Ü–∏–∏&raquo;.",
            ],
            1 => [
                'char'  => Sym::CH_ACTIVE,
                'color' => 'green',
                'title' => '–°–µ–π—á–∞—Å —Å—Ç–∞—Ç—É—Å &laquo;–ê–∫—Ç–∏–≤–Ω–æ&raquo;. &#10–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø–ª–∞—Ç–µ–∂–∞—Ö –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–µ. &#10–ù–∞–∂–∞—Ç—å –¥–ª—è &laquo;–ü–∞—É–∑—ã&raquo;.',
            ],
        ],

        Firm::F_HAS_AGENT => [
            0 => [
                'char'  => Sym::CH_AGENT,
                'color' => 'gray',
                'title' => '–°–µ–π—á–∞—Å —Å—Ç–∞—Ç—É—Å &laquo;–Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞&raquo;, &#10–¥—Ä—É–≥–æ–µ, —Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ. &#10–ù–∞–∂–∞—Ç—å –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ &laquo;–ê–≥–µ–Ω—Ç&raquo;.',
            ],
            1 => [
                'char'  => Sym::CH_AGENT,
                'color' => 'green',
                'title' => '–ü—Ä–æ–≤–∞–π–¥–µ—Ä / –ê–≥–µ–Ω—Ç &#10–°–µ–π—á–∞—Å —Å—Ç–∞—Ç—É—Å &laquo;–ê–≥–µ–Ω—Ç&raquo;. &#10–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ-–ê–≥–µ–Ω—Ç, –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞. &#10–ù–∞–∂–∞—Ç—å –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.',
            ],
        ],

        Firm::F_HAS_CLIENT => [
            0 => [
                'char'  => Sym::CH_UAH,
                'color' => 'gray',
                'title' => "–°–µ–π—á–∞—Å —Å—Ç–∞—Ç—É—Å &laquo;–ù–µ –ö–ª–∏–µ–Ω—Ç&raquo;. \n–ù–∞–∂–∞—Ç—å –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ &laquo;–ö–ª–∏–µ–Ω—Ç&raquo;, —Ç–æ–≥–æ, –∫—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å–ª—É–≥–∞–º–∏.",
            ],
            1 => [
                'char'  => Sym::CH_UAH,
                'color' => 'green',
                'title' => "–ö–ª–∏–µ–Ω—Ç / –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç \n–°–µ–π—á–∞—Å —Å—Ç–∞—Ç—É—Å &laquo;–ö–ª–∏–µ–Ω—Ç&raquo; (–∞–±–æ–Ω–µ–Ω—Ç). \n–ù–∞–∂–∞—Ç—å –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.",
            ],
        ],

        Firm::F_HAS_ALL_VISIBLE => [
            0 => [
                'char'  => Sym::CH_INVISIBLE,
                'color' => 'gray',
                'title' => "–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ &laquo;–°–ø–∏—Å–∫–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π&raquo; —Ç–æ–ª—å–∫–æ —É –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. \n–ù–∞–∂–∞—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–∞—Ö –¥–ª—è –≤—Å–µ—Ö.",
            ],
            1 => [
                'char'  => Sym::CH_VISIBLE,
                'color' => 'green',
                'title' => "–í–∏–¥–∏–º—ã–π –í–°–ï–ú \n–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ &laquo;–°–ø–∏—Å–∫–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π&raquo; —É –≤—Å–µ—Ö. \n–ù–∞–∂–∞—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–∞—Ö —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            ],
        ],

        Firm::F_HAS_ALL_LINKING => [
            0 => [
                'char'  => Sym::CH_LINK,
                'color' => 'gray',
                'title' => "–†–∞–∑—Ä–µ—à–µ–Ω–æ –ø–æ–¥–∫–ª—é—è—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ \n–æ—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \n–ø–æ —Ä—É—á–Ω–æ–º—É —É–∫–∞–∑–∞–Ω–∏—é –Ω–æ–º–µ—Ä–∞ UID –ø–æ–¥–∫–ª—é—á–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            ],
            1 => [
                'char'  => Sym::CH_LINK,
                'color' => 'green',
                'title' => "–ü–æ–¥–∫–ª—é—á–∞–µ–º—ã–π –í–°–ï–ú \n–†–∞–∑—Ä–µ—à–µ–Ω–æ –ø–æ–¥–∫–ª—é—è—á–µ–Ω–∏–µ –∫–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
            ],
        ],
    ];



    $arr = [];
    foreach ($statuses as $flag => $value) {
        $arr[$flag] =   "<a href=" . Firm::URI_STATUS . '?'
                        . http_build_query([
                            'id'     => $firm[Firm::F_ID],
                            'field'  => $flag,
                            'status' => (int)$firm[$flag],
                            'ref'    => rawurlencode($ref)]) . ' '
                        . "title='" . $value[(int)$firm[$flag]]['title'] . "'"
                        . "><span color={$value[(int)$firm[$flag]]['color']}>{$value[(int)$firm[$flag]]['char']}</span></a>";
    }
    return $arr;
}



function cleaner_html($dirty_html): string {
    require_once DIR_VENDOR . '/ezyang/htmlpurifier/library/HTMLPurifier.auto.php';
    $config = \HTMLPurifier_Config::createDefault();
    $config->set('Cache.SerializerPath', DIR_TEMP . '/htmlpurifier');
    $purifier = new \HTMLPurifier($config);
    return $purifier->purify($dirty_html);
}



/**
 *
 * @param string|array $msg
 * @param bool|null $show_key -- null -- –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä (—Å–µ–π—á–∞—Å –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ —á–∏—Å–ª–æ, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—å)
 * @return string
 */
function parce_msg(string|array $msg, bool|null $show_key = null): string {
    if (is_array($msg)) {
        $str = '<ul>';
        foreach ($msg as $key => $row) {
            $str .= "<li>";
            $str .= (is_array($row)
                        ? parce_msg($row)
                        : (is_null($show_key)
                                ? (is_int($key) ? "" : $key.' : ') . $row
                                : ($show_key ? $key.' : ' : '') . $row
                          )
                    );
            $str .= "</li>";
        }
        $str .= '</ul>';
    } else {
        $str = $msg;
    }
    return $str;
}



/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö –∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ k, kb, m, mb, g, gb
 * @param string $val
 * @return int
 */
function return_bytes(string $val): int
{
    if(empty($val))return 0;

    $val = trim($val);

    preg_match('#([0-9]+)[\s]*([a-z]+)#i', $val, $matches);

    $last = '';
    if(isset($matches[2])){
        $last = $matches[2];
    }

    if(isset($matches[1])){
        $val = (int) $matches[1];
    }

    switch (strtolower($last))
    {
        case 'g':
        case 'gb':
            $val *= 1024;
        case 'm':
        case 'mb':
            $val *= 1024;
        case 'k':
        case 'kb':
            $val *= 1024;
    }

    return (int) $val;
}



/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–¥—É–ª–µ–π
 * @param int|array|null $module -- —Å–ø–∏—Å–æ–∫ ID –º–æ–¥—É–ª–µ–π
 * @param int $perm -- –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
 * @return bool
 */
function can_perm(int|array|null $module, int $perm): bool {
    if (is_array($module)) {
        $can = false;
        foreach ($module as $module_one) { $can = $can | can_perm($module_one, $perm); }
        return $can;
    } else {
        return (bool) ((App::$app->permissions[$module] ?? 0) & $perm);
    }
}



/**
 * –ú–æ–∂–Ω–æ –ª–∏ –≤–∏–¥–µ—Ç—å –¥–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å
 * @param int $module
 * @return bool
 */
function can_view(int|array|null $module): bool {
    return can_perm($module, Perm::VIEW_VALUE);
}



/**
 * –ú–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ
 * @param int $module
 * @return bool
 */
function can_edit(int|array|null $module): bool {
    return can_perm($module, Perm::EDIT_VALUE);
}



/**
 * –ú–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ
 * @param int $module
 * @return bool
 */
function can_add(int|array|null $module): bool {
    return can_perm($module, Perm::ADD_VALUE);
}



/**
 * –ú–æ–∂–Ω–æ –ª–∏ —É–¥–∞–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ
 * @param int $module
 * @return bool
 */
function can_del(int|array|null $module): bool {
    return can_perm($module, Perm::DEL_VALUE);
}



/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –∫–∞–∫–æ–µ-—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
 * @param int $module
 * @return bool
 */
function can_use(int|array|null $module): bool {
    return can_perm($module, Perm::ALL_VALUE);
}



/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—Ö–æ–¥–∏—Ç –ª–∏ IPv4/IPv6 –≤ –¥–∏–∞–ø–∞–∑–æ–Ω (CIDR –∏–ª–∏ –æ–¥–∏–Ω–æ—á–Ω—ã–π IP)
 *
 * @param string $ip   –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π IP
 * @param string $cidr –î–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, "192.168.0.0/24" –∏–ª–∏ "8.8.8.8")
 * @return bool
 */
function ip_in_range(string $ip, string $cidr): bool {
    // –µ—Å–ª–∏ –º–∞—Å–∫–∏ –Ω–µ—Ç ‚Üí —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
    if (strpos($cidr, '/') === false) {
        return $ip === $cidr;
    }

    list($subnet, $mask) = explode('/', $cidr, 2);

    /*
     * –ø–µ—Ä–µ–≤–æ–¥–∏—Ç IP –≤ –±–∏–Ω–∞—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (packed in_addr):
     * IPv4 ‚Üí 4 –±–∞–π—Ç–∞, IPv6 ‚Üí 16 –±–∞–π—Ç.
     * –ï—Å–ª–∏ IP –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ‚Üí –≤–µ—Ä–Ω—ë—Ç false.
     */
    $ip_bin     = inet_pton($ip);
    $subnet_bin = inet_pton($subnet);
    /*
     * –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
     */
    if ($ip_bin === false || $subnet_bin === false) {
        return false; // –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP
    }

    $mask = (int)$mask;
    $len  = strlen($ip_bin); // 4 –±–∞–π—Ç–∞ IPv4 –∏–ª–∏ 16 –±–∞–π—Ç IPv6

    /*
     * $bytes ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –±–∞–π—Ç, –∫–æ—Ç–æ—Ä—ã–µ –≤—Ö–æ–¥—è—Ç –≤ –º–∞—Å–∫—É,
     * $bits ‚Äì —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –±–∏—Ç –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º –±–∞–π—Ç–µ.
     * –ù–∞–ø—Ä–∏–º–µ—Ä:
     *     /24 ‚Üí 3 –ø–æ–ª–Ω—ã—Ö –±–∞–π—Ç–∞ (24/8=3), –æ—Å—Ç–∞—Ç–æ–∫ 0.
     *     /21 ‚Üí 2 –ø–æ–ª–Ω—ã—Ö –±–∞–π—Ç–∞ (21/8=2), –æ—Å—Ç–∞—Ç–æ–∫ 5 –±–∏—Ç.
     */
    $bytes = intdiv($mask, 8);
    $bits  = $mask % 8;

    /*
     * üëâ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ $bytes –±–∞–π—Ç IP –∏ –ø–æ–¥—Å–µ—Ç–∏.
     *  –ï—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç ‚Üí IP –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω.
     *  –ü—Ä–∏–º–µ—Ä:
     *  IP 192.168.1.10 (C0 A8 01 0A)
     *  –ü–æ–¥—Å–µ—Ç—å 192.168.2.0/16 (C0 A8 02 00)
     *  –ü–µ—Ä–≤—ã–µ 2 –±–∞–π—Ç–∞ (C0 A8) —Å–æ–≤–ø–∞–¥–∞—é—Ç, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É /16 –ø—Ä–æ—Ö–æ–¥—è—Ç.
     */
    if ($bytes > 0 && substr($ip_bin, 0, $bytes) !== substr($subnet_bin, 0, $bytes)) {
        return false;
    }

    /*
     * üëâ–ï—Å–ª–∏ –º–∞—Å–∫–∞ –Ω–µ –∫—Ä–∞—Ç–Ω–∞ 8 (–Ω–∞–ø—Ä–∏–º–µ—Ä, /21, /13, /25):
     * –°–æ–∑–¥–∞—ë–º –º–∞—Å–∫—É –¥–ª—è –æ–¥–Ω–æ–≥–æ –±–∞–π—Ç–∞ ($maskByte).
     * –ü–æ–±–∏—Ç–æ–≤–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –±–∏—Ç –≤ —ç—Ç–æ–º –±–∞–π—Ç–µ.
     * –ï—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç ‚Üí IP –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω.
     */
    if ($bits > 0) {
        $maskByte = chr(((0xFF00 >> $bits) & 0xFF));
        if (($ip_bin[$bytes] & $maskByte) !== ($subnet_bin[$bytes] & $maskByte)) {
            return false;
        }
    }

    return true;
}



define("SIGN_MINUS", -1);
define("SIGN_NUL",    0);
define("SIGN_PLUS",  +1);

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞–∫ —á–∏—Å–ª–∞
 * @param int|float $value
 * @return int -1 –∏–ª–∏ 0 –∏–ª–∏ 1 (SIGN_MINUS, SIGN_NUL, SIGN_PLUS)
 */
function sign(int|float $value): int {
    return (($value < 0)
            ? SIGN_MINUS
            : (($value > 0)
                ? SIGN_PLUS
                : SIGN_NUL
              )
           );
}



function get_this_by_sign($value, $minus="red", $nul="gray", $plus="green") {

    switch (sign($value)) {
        case SIGN_MINUS:
            return $minus;
            //break;
        case SIGN_PLUS:
            return $plus;
            //break;
        case SIGN_NUL:
        default:
            return $nul;
            //break;
    }
}



function validate_ip(string|null $ip): bool {
    if (empty($ip)) {
        return false;
    } else {
        return filter_var($ip, FILTER_VALIDATE_IP);
    }
}



function validate_mac(string|null $mac) {
    if (is_empty($mac)) {
        return false;
    } else {
        return filter_var($mac, FILTER_VALIDATE_MAC);
    }
}



function is_ip_net(string|null $ip_net) {
    if (is_empty($ip_net)) {
        return false;
    } else {
        $pos_slash = strpos($ip_net, "/");
        $pos_minus = strpos($ip_net, "-");
        if ($pos_slash === false && $pos_minus === false) {
            return false;
        } else {
            if ($pos_slash > 0) {
                $rec = explode("/", $ip_net);
                if (count($rec) == 2) {
                    if (!is_numeric($rec[1])) { return false; }
                    if ((intval($rec[1]) < 0) || (intval($rec[1]) > 255)) { return false; }
                    return filter_var($rec[0], FILTER_VALIDATE_IP);
                } else {
                    return false;
                }
            } else {
                $rec = explode("-", $ip_net);
                if (count($rec) > 1) {
                    return true;
                } else {
                    return false;
                }
            }
        }
    }
}



/*
 * –í–æ–∑–≤—Ä–∞—â–∞–µ true –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å
 * –ù–ï –∑–∞–ø—Ä–µ—â–µ–Ω–∞ (['disabled'] != "true") –∏
 * –ù–ï –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ (['blocked'] != "true")
 */
function has_enabled_rec($rec) {
    return  !isset($rec['disabled']) ||
            (
                ($rec['disabled'] != "true") && (isset($rec['blocked'])
                    ? ($rec['blocked'] != "true")
                    : true)
            );
}



function get_str_cut(string|null $text, int $max_length=20, string $encoding="UTF-8") {
    if (is_empty($text)) {
        return "";
    }

    if (mb_strlen($text) == strlen($text)) {
        $text = mb_convert_encoding($text, $encoding, "cp1251, KOI8-R, UTF-8");
    }

    $text_dec = html_entity_decode($text);
    if(iconv_strlen($text_dec, $encoding)>$max_length) {
        $text_cut  = htmlentities(mb_substr($text_dec, 0, ($max_length-1), $encoding));
        return paint($text_cut . paint(CH_TRIANGLE, BLUE), face: 'monospace', title: $text);
    } else {
        return paint($text, face: 'monospace');
    }
}



/**
 * –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ AppBaseModel->url_abon_form()
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É-—Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–±–æ–Ω–µ–Ω—Ç–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param int $abon_id
 * @return string -- –°—Ç—Ä–æ–∫–∞ —Å html-–∫–æ–¥–æ–º
 */
function url_abon_form(int $abon_id): string {
    // !!! –£–±—Ä–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–∞–∑–µ
    $model = new AbonModel();
    return $model->url_abon_form($abon_id);
}


/**
 * –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ AppBaseModel->url_user_form()
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É-—Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param int $user_id
 * @return string -- –°—Ç—Ä–æ–∫–∞ —Å html-–∫–æ–¥–æ–º
 */
function url_user_form(int $user_id): string {
    // !!! –£–±—Ä–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–∞–∑–µ
    $model = new UserModel();
    return $model->url_user_form($user_id);
}



/**
 * –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ AppBaseModel->url_tp_form()
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É-—Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¢–ü
 * @param int|null $tp_id
 * @param array|null $tp
 * @param bool $has_img
 * @param int $icon_width
 * @param int $icon_height
 * @return string
 */
function url_tp_form(int|null $tp_id = null, array|null $tp = null, bool $has_img = false, int $icon_width = ICON_WIDTH_DEF, int $icon_height = ICON_HEIGHT_DEF): string {
    // !!! –£–±—Ä–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–∞–∑–µ
    $model = new UserModel();
    return $model->url_tp_form($tp_id, $tp, $has_img, $icon_width, $icon_height);
}



function url_pa_form($pa_id, int $icon_width = Icons::ICON_WIDTH_DEF, int $icon_height = Icons::ICON_HEIGHT_DEF): string {
    // !!! –í—ã–∑–æ–≤ –∫—ç—à–∏—Ä—É–µ—Ç—Å—è. –ù–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω—É–∂–Ω–æ –∫–∞–∫-—Ç–æ –æ–±–æ–π—Ç–∏—Å—å –±–µ–∑ –≤—ã–∑–æ–≤–∞ –±–∞–∑—ã.
    $model = new AbonModel();
    $pa = $model->get_row_by_id(PA::TABLE, $pa_id);
    return "<a href=/pa_form.php?pa_id=".$pa_id." target=_blank title='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –ø—Ä–∞–π—Å–æ–≤—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç \n[{$pa_id}] {$pa['net_name']}'><img src='".Icons::SRC_PA_EDIT."' width=$icon_width height=$icon_height /></a>";
}


function url_pa_form_22($pa_id): string {
    return url_pa_form(pa_id: $pa_id, icon_width: 22, icon_height: 22);
}



function price_frm(int $price_id, bool $has_img = true, int $icon_width = 22, int $icon_height = 22, string $target = "_self"): string {
    // !!! –£–±—Ä–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–∞–∑–µ
    $model = new AbonModel();
    $price = $model->get_price($price_id);
    return "<a href='/price_form.php?id={$price_id}' title='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–π—Å \n[".$price_id."] ".$price['title']."\n{$price['description']}' target={$target}>".($has_img?"<img src=/img/price_edit.png alt='[edit]' width=$icon_width height=$icon_height>":$price['title'])."</a>";
}



function isPhone(string $value): bool {
    // –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –ø–ª—é—Å
    return preg_match('/^\+?\d{5,15}$/', preg_replace('/[^\d\+]/', '', $value));
}



function isUsername(string $value): bool {
    // –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±—É–∫–≤—ã, –¥–ª–∏–Ω–∞ 5-32, –¥–æ–ø—É—Å—Ç–∏–º—ã –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _
    return preg_match('/^[a-zA-Z][\w_]{4,31}$/', $value);
}



function isTelegram(string $value): bool {
    /*
     * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
     *  - http://t.me/username –∏–ª–∏ https://t.me/username
     *  - @username
     *  - email: user@example.com
     *  - —Ç–µ–ª–µ—Ñ–æ–Ω: +380501234567, 380501234567, 0501234567
     * Username: 5‚Äì32 —Å–∏–º–≤–æ–ª–∞, –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã/–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ, —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
     */
    $value = trim($value);

    // Telegram web-—Å—Å—ã–ª–∫–∞
    if (preg_match('#^https?://(www\.)?t\.me/[\w_]{5,32}$#i', $value)) {
        return true;
    }

    // Telegram username —Å @
    if (preg_match('#^@[\w_]{5,32}$#i', $value)) {
        return true;
    }

    // Email
    if (filter_var($value, FILTER_VALIDATE_EMAIL)) {
        return true;
    }

    // –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¥–æ–ø—É—Å–∫–∞–µ–º +, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ —Å–∫–æ–±–∫–∏)
    if (preg_match('#^\+?\d[\d\s\-\(\)]{7,20}$#', $value)) {
        return true;
    }

    return false;
}



function isJabberFull(string $value): bool {
    /**
     * Jabber (XMPP) –æ–±—ã—á–Ω–æ –ª–æ–≥–∏–Ω –∏–º–µ–µ—Ç –≤–∏–¥: user@domain
     * –ò–Ω–æ–≥–¥–∞ —Å –ø–æ—Ä—Ç–æ–º –∏–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–º: user@domain/resource
     * –ø—Ä–æ–≤–µ—Ä—è–µ–º: user@domain/resource
     *
     * [a-z]{2,} ‚Äî –¥–æ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞
     * i ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –≤–∞–∂–µ–Ω
     * –î–æ–ø—É—Å–∫–∞—é—Ç—Å—è –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _, -, . –≤ –∏–º–µ–Ω–∏ –∏ –¥–æ–º–µ–Ω–µ
     * –†–µ—Å—É—Ä—Å (/resource) –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω
     *  ‚Äî —Ä–µ—Å—É—Ä—Å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, -, ., _
     */
    return preg_match('/^[\w\.\-]+@[\w\.\-]+\.[a-z]{2,}(\/[\w\-\.]+)?$/i', $value);
}

/*
 * <a href="tel:+74955555555">+7(495) 555-55-55</a>
 * <a href="mailto:mail@example.com">–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏ –Ω–∞ –µ–º–∞–π–ª</a>
 * 
 * –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ Telegram
 * <a href="https://t.me/agvento1">–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É</a>
 * <a href="tg://resolve?domain=agvento-test">–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É</a>
 * 
 * –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ Viber –Ω–∞ —Å–∞–π—Ç–µ
 * 
 * 1. –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –Ω–æ–º–µ—Ä–æ–º
 * –Ω–∞ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Viber. –í–º–µ—Å—Ç–æ –ø–ª—é—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ¬´%2B¬ª:
 * <a href="viber://chat?number=%2B4957777777">–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç Viber</a>
 * 
 * 2. –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ c —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤):
 * <a href="viber://add?number=4957777777">–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –≤ Viber</a>
 * 
 * 3. –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–∫—Å—Ç–æ–º (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤), –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:
 * <a href="viber://forward?text=–ü—Ä–∏–≤–µ—Ç!">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–∫—Å—Ç–æ–º –≤ Viber</a>
 * 
 * 4. –û—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É ¬´–ß–∞—Ç—ã¬ª:
 * <a href="viber://chats">–û—Ç–∫—Ä—ã—Ç—å –ß–∞—Ç—ã –≤ Viber</a>
 * 
 * 5. –í –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É –≤—ã–∑–æ–≤–æ–≤
 * <a href="viber://calls">–û—Ç–∫—Ä—ã—Ç—å –í—ã–∑–æ–≤—ã –≤ Viber</a>
 * 
 * –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ WhatsApp
 *
 * 1. –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –Ω–æ–º–µ—Ä–æ–º
 * <a href="https://wa.me/4957777777">–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º WhatsApp</a>
 * 
 * 2. –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –Ω–æ–º–µ—Ä–æ–º –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:
 * <a href="https://wa.me/4957777777?text=–ü—Ä–∏–≤–µ—Ç!">–ß–∞—Ç+—Å–æ–æ–±—â–µ–Ω–∏–µ WhatsApp</a>
 * 
 * 3. –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–∫—Å—Ç–æ–º
 * <a href="whatsapp://send?text=–ü—Ä–∏–≤–µ—Ç!">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–∫—Å—Ç–æ–º WhatsApp</a>
 * 
 * –°—Å—ã–ª–∫–∞ –Ω–∞ VK
 * 
 * –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ:
 * <a href="vk.me/agvento">–ù–∞–ø–∏—Å–∞—Ç—å –≤ VK</a>
 * 
 * –°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä Facebook
 * 
 * –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Facebook:
 * <a href="https://www.messenger.com/t/jack.malbon.3">Facebook Messenger</a>
 *
 */


/**
 * –í –æ–¥–Ω–æ–º–µ—Ä–Ω–æ–º –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–º –º–∞—Å—Å–∏–≤–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ–ª–µ –º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ $func($value)
 * @param array $row
 * @param string|int|bool $field
 * @param callable $func
 */
function replace_field_on_row(array &$row, string|int|bool $field, callable $func) {
    foreach ($row as $key => &$value) {
        if ($key == $field && !is_null($value)) {
            $value = $func($value);
        }
    }
}



/**
 * –í –¥–≤—É–º–µ—Ä–Ω–æ–º –º–∞—Å—Å–∏–≤–µ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ–ª–µ –º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ $func($value)
 * @param array $table -- –∏–∑–º–µ–Ω—è–µ–º—ã–π –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤
 * @param string|int|bool $field -- –∏–∑–º–µ–Ω—è–µ–º–æ–µ –ø–æ–ª–µ
 * @param callable $func -- –≤—ã—Å—ã–≤–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ª—è
 */
function replace_field_on_table(array &$table, string|int|bool $field, callable $func) {
    foreach ($table as &$row) {
        replace_field_on_row($row, $field, $func);
    }
}



function highlight_like_groups(string $text, string $likePattern): string {
    $parts = array_filter(explode('%', $likePattern));
    if (!$parts) return htmlspecialchars($text, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8');

    // —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    usort($parts, fn($a, $b) => mb_strlen($b) <=> mb_strlen($a));

    $textHtml = htmlspecialchars($text, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8');

    foreach ($parts as $part) {
        if ($part === '') continue;
        $partEsc = preg_quote($part, '/');

        // —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è –∑–∞–º–µ–Ω–∞ –≤—Å–µ—Ö –≤—Ö–æ–∂–¥–µ–Ω–∏–π
        $textHtml = preg_replace_callback(
            "/($partEsc)/iu",
            fn($m) => '<mark>' . $m[1] . '</mark>',
            $textHtml
        );
    }

    return $textHtml;
}








